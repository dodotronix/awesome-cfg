--FIXME LICENCE
--Author: dodotronix
--DESCRIPTION
--
--TODO
--set color scheme
--opened window list
--create battery widget
--notes widget
--sound widget
--switcher between night mode and day mode
--xterm cetering and set strict size (rules)


-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup").widget
-- Enable VIM help for hotkeys widget when client with matching name is opened:
require("awful.hotkeys_popup.keys.vim")
-- automatic menu assembly
local freedesktop = require("freedesktop")

local xrandr = require("xrandr")

-- variables
local tags_num =1
local pager ={height =100, width =127}
local panels ={}
local geo

local bg_grad ={
  type="linear", 
  from = {0, 0}, 
  to = {0, 45}, 
  stops = { 
    {0, "#45484d"}, 
    {0.5, "#000000"}, 
    {1.0, "#45484d"}
  } 
}

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
  naughty.notify({ preset = naughty.config.presets.critical,
  title = "Oops, there were errors during startup!",
  text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
  local in_error = false
  awesome.connect_signal("debug::error", function (err)
    -- Make sure we don't go into an endless error loop
    if in_error then return end
    in_error = true

    naughty.notify({ preset = naughty.config.presets.critical,
    title = "Oops, an error happened!",
    text = tostring(err) })
    in_error = false
  end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init("/home/idlerug/.config/awesome/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "xterm"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
modkey = "Mod1"

-- Table of layouts to cover with awful.layout.inc, order matters.
awful.layout.layouts = {
  awful.layout.suit.floating,
  awful.layout.suit.fair
}
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
  local instance = nil

  return function ()
    if instance and instance.wibox.visible then
      instance:hide()
      instance = nil
    else
      instance = awful.menu.clients({ theme = { width = 250 } })
    end
  end
end

local function client_num(tag)
  -- client count
  local ccnt = 0
  local client_tab = tag:clients()
  local actual_tag = awful.screen.focused().selected_tag.index

  return ccnt
end

local function new_tag()
  tags_num = tags_num +1
  local tag_pos = awful.screen.focused().selected_tag.index
  local tag_pos = tag_pos +1
  awful.tag.add(" "..tag_pos.." ", {
    screen = s,
    selected = true,
    index = tag_pos,
    layout = awful.layout.suit.fair
  })
  -- sort tags 
  local tag_tab = awful.screen.focused().tags
  tag_pos = tag_pos +1
  for i = tag_pos, tonumber(tags_num) do
    tag_tab[i].name = " ".. i .." "
  end

  panels[2].width = panels[2].width +125
  panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
  y =math.floor(geo.height/6 - panels[2].height/2)})
  panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0} 
end

local function erase_tag()
  local t = awful.screen.focused().selected_tag

  -- check if tag is empty -> variable count = 0
  local client_tab = t:clients()
  local count = 0

  for _ in pairs(client_tab) do
    count = count + 1
  end

  if tags_num > 1 and count == 0 then
    tags_num = tags_num - 1

    t:delete()
    local tag_pos = awful.screen.focused().selected_tag.index
    local tag_tab = awful.screen.focused().tags

    -- sort tags   
    for i = tag_pos, tonumber(tags_num) do
      tag_tab[i].name = " ".. i .." "
    end

    panels[2].width = panels[2].width -125
    panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
    y =math.floor(geo.height/6 - panels[2].height/2)})
    panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}
  end
end
-- }}}

-- {{{ Menu
-- Create a launcher widget and a main menu
myawesomemenu = {
  { "hotkeys", function() return false, hotkeys_popup.show_help end},
  { "manual", terminal .. " -e man awesome" },
  { "edit config", editor_cmd .. " " .. awesome.conffile },
  { "restart", awesome.restart },
  { "quit", function() awesome.quit() end}
}

--TODO rewrite freedesktop with your own categories 
--set the biggest icons 
--set size on screen 
mymainmenu = freedesktop.menu.build({
  before = {
    { "Awesome", myawesomemenu, beautiful.awesome_icon }
  }, icon_size = 128
})

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()

-- {{{ Wibar
-- Create a textclock widget
mytextclock = wibox.widget.textclock("<span font=\"System San Francisco 20\"><span font=\"System San Francisco 25\">%H:%M</span></span>")

-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
awful.button({ }, 1, function(t) t:view_only() end),
awful.button({ modkey }, 1, function(t)
  if client.focus then
    client.focus:move_to_tag(t)
  end
end),
awful.button({ }, 3, awful.tag.viewtoggle),
awful.button({ modkey }, 3, function(t)
  if client.focus then
    client.focus:toggle_tag(t)
  end
end),
awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
)

local tasklist_buttons = gears.table.join(
awful.button({ }, 1, function (c)
  if c == client.focus then
    c.minimized = true
  else
    -- Without this, the following
    -- :isvisible() makes no sense
    c.minimized = false
    if not c:isvisible() and c.first_tag then
      c.first_tag:view_only()
    end
    -- This will also un-minimize
    -- the client, if needed
    client.focus = c
    c:raise()
  end
end),
awful.button({ }, 3, client_menu_toggle_fn()),
awful.button({ }, 4, function ()
  awful.client.focus.byidx(1)
end),
awful.button({ }, 5, function ()
  awful.client.focus.byidx(-1)
end))

local function set_wallpaper(s)
  -- Wallpaper
  if beautiful.wallpaper then
    local wallpaper = beautiful.wallpaper
    -- If wallpaper is a function, call it with the screen
    if type(wallpaper) == "function" then
      wallpaper = wallpaper(s)
    end
    gears.wallpaper.maximized(wallpaper, s, true)
  end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s)
  -- Wallpaper
  set_wallpaper(s)

  -- Each screen has its own tag table.
  awful.tag({" 1 "}, s, awful.layout.layouts[1])

  -- Create a promptbox for each screen
  s.mypromptbox = awful.widget.prompt()
  -- Create an imagebox widget which will contains an icon indicating which layout we're using.
  -- We need one layoutbox per screen.
  s.mylayoutbox = awful.widget.layoutbox(s)
  s.mylayoutbox:buttons(gears.table.join(
  awful.button({ }, 1, function () awful.layout.inc( 1) end),
  awful.button({ }, 3, function () awful.layout.inc(-1) end),
  awful.button({ }, 4, function () awful.layout.inc( 1) end),
  awful.button({ }, 5, function () awful.layout.inc(-1) end)))
  -- Create a taglist widget

  s.mytaglist =awful.widget.taglist(
  s, 
  awful.widget.taglist.filter.all,
  taglist_buttons)

  -- Create a tasklist widget
  s.mytasklist =awful.widget.tasklist(
  s, 
  awful.widget.tasklist.filter.currenttags, 
  tasklist_buttons)

  panels[1] = awful.wibox({height =50, 
  width =1000, 
  ontop =true,
  position ="top", 
  screen =s})

  panels[2] =awful.wibox({height =pager.height, 
  width =pager.width,
  border_width = 1,
  border_color = "#ff9e01",
  ontop =true,
  visible =false,
  position ="top",
  screen =s})
  --TODO create new panel with battery status and client layout status

  -- Widgets from top to bottom
  local rec_shape = function(cr, width, height)
    gears.shape.rounded_rect(cr, width, height, 0)
  end

  -- time widget
  local time_w = wibox.container.background()
  time_w:set_shape(rec_shape)
  time_w:set_shape_border_width(1)
  time_w:set_shape_border_color("#ff9e01")
  time_w:set_widget(wibox.layout.margin(mytextclock,5,5))

  -- client layout switch; wrap into rectangle shape
  local clay_w = wibox.container.background()
  clay_w:set_shape(rec_shape)
  clay_w:set_shape_border_width(1)
  clay_w:set_shape_border_color("#ff9e01")
  clay_w:set_widget(wibox.layout.margin(s.mylayoutbox,5,5,5,5))

  -- bind both widget together
  local left_layout = wibox.layout.fixed.horizontal()
  left_layout:add(time_w)
  --left_layout:add(clay_w)

  -- create system tray and wrap it into rectangle
  local tray = wibox.widget.systray()
  tray:set_forced_width(90)

  local tray_w = wibox.container.background()
  tray_w:set_shape(rec_shape)
  tray_w:set_shape_border_width(1)
  tray_w:set_shape_border_color("#ff9e01")
  tray_w:set_widget(wibox.layout.margin(tray, 2, 2, 2, 2))

  -- final panel layout
  local panel_l = wibox.layout.align.horizontal()
  panel_l:set_left(left_layout)
  panel_l:set_middle(s.mytasklist)
  panel_l:set_right(tray_w)
  panels[1]:set_widget(panel_l)

  --Pager setup
  geo = s:get_bounding_geometry()
  local pager = wibox.layout.align.horizontal()
  pager:set_middle(s.mytaglist)

  panels[2]:set_widget(pager)
  panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
  y =math.floor(geo.height/6 - panels[2].height/2)})

  --define function for hiding pager
  ---[[

  --TODO edit code to make pager dissapeare if I grap ALT key
  tm = timer({timeout = 0.7}) --set timeout for pager appear
  function box_visibility_tm(box, tm)
    if box.visible then
      tm:stop()
    else
      box.visible = true
      panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
      panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}
    end
    tm:connect_signal("timeout", 
    function()
      panels[2].visible = false
      panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
      panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}
      tm:stop()
    end)
    tm:start()
  end

  --launche timing for pager disappearing
  awful.tag.attached_connect_signal(s, "property::selected", 
  function()
    box_visibility_tm(panels[2], tm)
  end)
  panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
  panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}

  --]]
end)
-- }}}

-- {{{ Mouse bindings
root.buttons(gears.table.join(
awful.button({ }, 3, function () mymainmenu:toggle() end),
awful.button({ }, 4, awful.tag.viewnext),
awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = gears.table.join(
awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
{description="show help", group="awesome"}),
awful.key({ modkey,           }, "h",   awful.tag.viewprev,
{description = "view previous", group = "tag"}),
awful.key({ modkey,           }, "n",   awful.tag.viewnext,
{description = "view next", group = "tag"}),
awful.key({ modkey,           }, "a",   function() new_tag() end,
{description = "add tag", group = "tag"}),
awful.key({ modkey,           }, "e",   function() erase_tag() end,
{description = "erase tag", group = "tag"}),
awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
{description = "go back", group = "tag"}),
awful.key({ modkey,           }, "j",
function ()
  awful.client.focus.byidx( 1)
end,
{description = "focus next by index", group = "client"}
),
awful.key({ modkey,           }, "k",
function ()
  awful.client.focus.byidx(-1)
end,
{description = "focus previous by index", group = "client"}
),
awful.key({ modkey,           }, "d", 
function () 
  mouse.coords{
    x =math.floor(geo.width/3), 
    y =math.floor(geo.height/4)
  }
  mymainmenu:show()
end,
{description = "show main menu", group = "awesome"}),

-- Multimedia keys
awful.key({ }, "XF86AudioRaiseVolume",    function () awful.util.spawn("amixer -q -D pulse sset Master 3%+") end),
awful.key({ }, "XF86AudioLowerVolume",    function () awful.util.spawn("amixer -q -D pulse sset Master 3%-") end),
awful.key({ }, "XF86AudioMute",    function () awful.util.spawn("amixer -q -D pulse sset Master toggle") end),


-- Layout manipulation
awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
{description = "swap with next client by index", group = "client"}),
awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
{description = "swap with previous client by index", group = "client"}),
awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
{description = "focus the next screen", group = "screen"}),
awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
{description = "focus the previous screen", group = "screen"}),
awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
{description = "jump to urgent client", group = "client"}),
awful.key({ modkey,           }, "Tab",
function ()
  awful.client.focus.history.previous()
  if client.focus then
    client.focus:raise()
  end
end,
{description = "go back", group = "client"}),

-- Standard program
awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
{description = "open a terminal", group = "launcher"}),
awful.key({ modkey, "Control" }, "r", awesome.restart,
{description = "reload awesome", group = "awesome"}),
awful.key({ modkey, "Shift"   }, "q", awesome.quit,
{description = "quit awesome", group = "awesome"}),

awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
{description = "increase master width factor", group = "layout"}),
awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
{description = "decrease master width factor", group = "layout"}),
awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
{description = "increase the number of master clients", group = "layout"}),
awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
{description = "decrease the number of master clients", group = "layout"}),
awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
{description = "increase the number of columns", group = "layout"}),
awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
{description = "decrease the number of columns", group = "layout"}),
awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
{description = "select next", group = "layout"}),
awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
{description = "select previous", group = "layout"}),

awful.key({ modkey, "Control" }, "n",
function ()
  local c = awful.client.restore()
  -- Focus restored client
  if c then
    client.focus = c
    c:raise()
  end
end,
{description = "restore minimized", group = "client"}),

-- Prompt
awful.key({ modkey },            "r",     function () awful.screen.focused().mypromptbox:run() end,
{description = "run prompt", group = "launcher"}),

awful.key({ modkey }, "x",
function ()
  awful.prompt.run {
    prompt       = "Run Lua code: ",
    textbox      = awful.screen.focused().mypromptbox.widget,
    exe_callback = awful.util.eval,
    history_path = awful.util.get_cache_dir() .. "/history_eval"
  }
end,
{description = "lua execute prompt", group = "awesome"}),
-- Menubar
awful.key({ modkey }, "p", function() menubar.show() end,
{description = "show the menubar", group = "launcher"})
)


clientkeys = gears.table.join(
awful.key({ modkey,           }, "f",
function (c)
  c.fullscreen = not c.fullscreen
  c:raise()
end,
{description = "toggle fullscreen", group = "client"}),
awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
{description = "close", group = "client"}),
awful.key({modkey}, "y", function() xrandr.xrandr() end),
awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
{description = "toggle floating", group = "client"}),
awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
{description = "move to master", group = "client"}),
awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
{description = "move to screen", group = "client"}),
awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
{description = "toggle keep on top", group = "client"}),
awful.key({ modkey,           }, "b",
function (c)
  -- The client currently has the input focus, so it cannot be
  -- minimized, since minimized clients can't have the focus.
  c.minimized = true
end ,
{description = "minimize", group = "client"}),
awful.key({ modkey,           }, "m",
function (c)
  c.maximized = not c.maximized
  c:raise()
end ,
{description = "(un)maximize", group = "client"}),
awful.key({ modkey, "Control" }, "m",
function (c)
  c.maximized_vertical = not c.maximized_vertical
  c:raise()
end ,
{description = "(un)maximize vertically", group = "client"}),
awful.key({ modkey, "Shift"   }, "m",
function (c)
  c.maximized_horizontal = not c.maximized_horizontal
  c:raise()
end ,
{description = "(un)maximize horizontally", group = "client"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
  globalkeys = gears.table.join(globalkeys,
  -- View tag only.
  awful.key({ modkey }, "#" .. i + 9,
  function ()
    local screen = awful.screen.focused()
    local tag = screen.tags[i]
    if tag then
      tag:view_only()
    end
  end,
  {description = "view tag #"..i, group = "tag"}),
  -- Toggle tag display.
  awful.key({ modkey, "Control" }, "#" .. i + 9,
  function ()
    local screen = awful.screen.focused()
    local tag = screen.tags[i]
    if tag then
      awful.tag.viewtoggle(tag)
    end
  end,
  {description = "toggle tag #" .. i, group = "tag"}),
  -- Move client to tag.
  awful.key({ modkey, "Shift" }, "#" .. i + 9,
  function ()
    if client.focus then
      local tag = client.focus.screen.tags[i]
      if tag then
	client.focus:move_to_tag(tag)
      end
    end
  end,
  {description = "move focused client to tag #"..i, group = "tag"}),
  -- Toggle tag on focused client.
  awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
  function ()
    if client.focus then
      local tag = client.focus.screen.tags[i]
      if tag then
	client.focus:toggle_tag(tag)
      end
    end
  end,
  {description = "toggle focused client on tag #" .. i, group = "tag"})
  )
end

clientbuttons = gears.table.join(
awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
awful.button({ modkey }, 1, awful.mouse.client.move),
awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
  -- All clients will match this rule.
  { rule = { },
  properties = { border_width = beautiful.border_width,
  border_color = beautiful.border_normal,
  focus = awful.client.focus.filter,
  raise = true,
  size_hints_honor = false,
  keys = clientkeys,
  buttons = clientbuttons,
  screen = awful.screen.preferred,
  --placement = awful.placement.no_overlap+awful.placement.no_offscreen
  placement = awful.placement.centered
}
    },

    -- Floating clients.
    { rule_any = {
      instance = {
	"DTA",  -- Firefox addon DownThemAll.
	"copyq",  -- Includes session name in class.
      },
      class = {
	"Arandr",
	"Gpick",
	"Kruler",
	"MessageWin",  -- kalarm.
	"Sxiv",
	"Wpa_gui",
	"pinentry",
	"veromix",
	"xtightvncviewer"},

	name = {
	  "Event Tester",  -- xev.
	},
	role = {
	  "AlarmWindow",  -- Thunderbird's calendar.
	  "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
	}
      }, properties = { floating = true }},

      -- Add titlebars to normal clients and dialogs
      { rule_any = {type = { "normal", "dialog" }
    }, properties = { titlebars_enabled = true }
  }, 

  -- Set Firefox to always map on the tag named "2" on screen 1.
  -- { rule = { class = "Firefox" },
  --   properties = { screen = 1, tag = "2" } },
}
-- }}}

-- {{{ Signals
--Signal function to hide panel if fullscreen is active
client.connect_signal("property::fullscreen", function (c)
  if c.fullscreen then
    panels[1].visible = false
  else
    panels[1].visible = true
  end

  panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
  panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
  y =math.floor(geo.height/6 - panels[2].height/2)})
  panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}
 
end)

-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            client.focus = c
            c:raise()
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            client.focus = c
            c:raise()
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c) : setup {
        { -- Left
            --awful.titlebar.widget.iconwidget(c),
            --buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
		widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            --awful.titlebar.widget.floatingbutton (c),
            --awful.titlebar.widget.maximizedbutton(c),
            --awful.titlebar.widget.stickybutton   (c),
            --awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
        and awful.client.focus.filter(c) then
        client.focus = c
    end
end)

client.connect_signal("focus", function(c) 
  if c.fullscreen then
    panels[1].visible = false
  else
    panels[1].visible = true
  end

  panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
  panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
  y =math.floor(geo.height/6 - panels[2].height/2)})
  panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}

  c.border_color = beautiful.border_focus 
end)

client.connect_signal("unfocus", function(c)
  --TODO check if there are any clients, if not make panel visible or 
  -- dont rerender panel -> it is blinking 
  panels[1].visible = true
  panels[1]:struts{left = 0, right = 0, bottom = 0, top = 20}
  panels[2]:geometry({x =math.floor((geo.width - panels[2].width)/2), 
  y =math.floor(geo.height/6 - panels[2].height/2)})
  panels[2]:struts{left = 0, right = 0, bottom = 0, top = 0}

  c.border_color = beautiful.border_normal 
end)
-- }}}
